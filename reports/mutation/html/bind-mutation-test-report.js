document.querySelector('mutation-test-report-app').report = {"files":{"/Users/jmeng/Documents/code/t485/src/components/layout/Layout.tsx":{"language":"typescript","mutants":[{"id":"1","location":{"end":{"column":73,"line":58},"start":{"column":53,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"0","location":{"end":{"column":2,"line":72},"start":{"column":16,"line":34}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"2","location":{"end":{"column":78,"line":58},"start":{"column":76,"line":58}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"3","location":{"end":{"column":47,"line":61},"start":{"column":16,"line":61}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"5","location":{"end":{"column":42,"line":61},"start":{"column":41,"line":61}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"4","location":{"end":{"column":47,"line":61},"start":{"column":16,"line":61}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"6","location":{"end":{"column":42,"line":61},"start":{"column":41,"line":61}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"7","location":{"end":{"column":24,"line":62},"start":{"column":23,"line":62}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Survived"},{"id":"9","location":{"end":{"column":21,"line":63},"start":{"column":19,"line":63}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"8","location":{"end":{"column":22,"line":62},"start":{"column":19,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"10","location":{"end":{"column":26,"line":63},"start":{"column":23,"line":63}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\n// import { StaticQuery, graphql } from \"gatsby\"\nimport { Col, Container, Row } from \"react-bootstrap\"\nimport Navbar from \"./Navbar\"\n// import styled from \"styled-components\"\nimport \"../../styles/style.scss\"\n\ninterface LayoutProps {\n  /**\n   * The content of the page. It will be wrapped in a contianer.\n   */\n  children: React.ReactNode\n  /**\n   * The path to the current page. It will be used for the navbar.\n   */\n  pageName?: string\n  /**\n   * If provided, the navbar will have a transparent background.\n   */\n  transparentNavFooter?: boolean\n  /**\n   * Whether or not to render the admin layout, which includes the special admin navbar.\n   */\n  admin?: boolean\n}\n\nconst Layout = ({\n  children,\n  pageName,\n  transparentNavFooter,\n  admin,\n}: LayoutProps): React.ReactElement => (\n  <>\n    <Container fluid className=\"px-0 main\">\n      <Navbar\n        pageName={pageName}\n        admin={admin}\n        transparent={transparentNavFooter}\n      />\n      <Row noGutters>\n        <Col>\n          <Container className=\"mt-5\">\n            <main>{children}</main>\n          </Container>\n        </Col>\n      </Row>\n    </Container>\n    <Container fluid className=\"px-0\">\n      <Row noGutters>\n        <Col className=\"footer-col\">\n          <footer className={transparentNavFooter ? \"transparent-footer\" : \"\"}>\n            <span>\n              Copyright Â© 2006\n              {new Date().getFullYear() > 2006\n                ? \"-\" + new Date().getFullYear()\n                : \"\"}{\" \"}\n              Troop 485, Silicon Valley Monterey Bay Council, Boy Scouts of\n              America.\n            </span>\n          </footer>\n        </Col>\n      </Row>\n    </Container>\n  </>\n)\n\n// export { Layout };\nexport default Layout\n"},"/Users/jmeng/Documents/code/t485/src/components/layout/Navbar.tsx":{"language":"typescript","mutants":[{"id":"11","location":{"end":{"column":2,"line":43},"start":{"column":18,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"13","location":{"end":{"column":6,"line":28},"start":{"column":26,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"12","location":{"end":{"column":4,"line":29},"start":{"column":21,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"16","location":{"end":{"column":21,"line":30},"start":{"column":7,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"17","location":{"end":{"column":21,"line":30},"start":{"column":7,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"19","location":{"end":{"column":4,"line":42},"start":{"column":10,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"18","location":{"end":{"column":4,"line":36},"start":{"column":23,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"20","location":{"end":{"column":2,"line":93},"start":{"column":42,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"21","location":{"end":{"column":14,"line":48},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"23","location":{"end":{"column":4,"line":54},"start":{"column":16,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"22","location":{"end":{"column":14,"line":48},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"24","location":{"end":{"column":38,"line":50},"start":{"column":24,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"25","location":{"end":{"column":59,"line":50},"start":{"column":47,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"26","location":{"end":{"column":11,"line":55},"start":{"column":7,"line":55}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"27","location":{"end":{"column":11,"line":55},"start":{"column":7,"line":55}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"28","location":{"end":{"column":4,"line":74},"start":{"column":13,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"29","location":{"end":{"column":27,"line":58},"start":{"column":13,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"30","location":{"end":{"column":58,"line":59},"start":{"column":16,"line":59}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"31","location":{"end":{"column":56,"line":59},"start":{"column":26,"line":59}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"32","location":{"end":{"column":56,"line":59},"start":{"column":26,"line":59}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"33","location":{"end":{"column":45,"line":59},"start":{"column":43,"line":59}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"14","location":{"end":{"column":21,"line":27},"start":{"column":20,"line":27}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Survived"},{"id":"34","location":{"end":{"column":66,"line":63},"start":{"column":36,"line":63}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"15","location":{"end":{"column":19,"line":27},"start":{"column":16,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"36","location":{"end":{"column":55,"line":63},"start":{"column":53,"line":63}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"35","location":{"end":{"column":66,"line":63},"start":{"column":36,"line":63}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"37","location":{"end":{"column":12,"line":75},"start":{"column":7,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"38","location":{"end":{"column":12,"line":75},"start":{"column":7,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"39","location":{"end":{"column":4,"line":86},"start":{"column":14,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"40","location":{"end":{"column":38,"line":77},"start":{"column":24,"line":77}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"41","location":{"end":{"column":56,"line":77},"start":{"column":47,"line":77}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"43","location":{"end":{"column":54,"line":123},"start":{"column":34,"line":123}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"44","location":{"end":{"column":59,"line":123},"start":{"column":57,"line":123}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"42","location":{"end":{"column":2,"line":151},"start":{"column":30,"line":115}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"45","location":{"end":{"column":30,"line":128},"start":{"column":27,"line":128}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"46","location":{"end":{"column":55,"line":129},"start":{"column":35,"line":129}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"47","location":{"end":{"column":53,"line":129},"start":{"column":44,"line":129}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import React, { ReactElement, ReactNode } from \"react\"\nimport { Link } from \"gatsby\"\nimport { navigate } from \"gatsby-link\"\nimport { Nav, Navbar as BootstrapNavbar, NavDropdown } from \"react-bootstrap\"\nimport firebase from \"gatsby-plugin-firebase\"\nimport { useAuthState } from \"react-firebase-hooks/auth\"\nimport classNames from \"classnames\"\n\nfunction NavbarLink(props: {\n  /**\n   * The page the link should redirect to.\n   */\n  page: string\n  /**\n   * The text of the navbar link.\n   */\n  children: ReactNode\n  /**\n   * Whether the link should be a dropdown link\n   */\n  dropdown?: boolean\n}): ReactElement {\n  // Gatsby link element doesn't work well with our storybook config\n  const linkProps = {\n    eventKey: props.page,\n    onClick: (): void => {\n      navigate(\"/\" + props.page)\n    },\n  }\n  if (props.dropdown) {\n    return (\n      <>\n        <NavDropdown.Item {...linkProps}>{props.children}</NavDropdown.Item>\n      </>\n    )\n  } else {\n    return (\n      <Nav.Item>\n        <Nav.Link {...linkProps}>{props.children}</Nav.Link>\n      </Nav.Item>\n    )\n  }\n}\n\nconst AuthDropdown = (): ReactElement => {\n  const [user, loading, error] = useAuthState(firebase.auth())\n\n  if (loading) {\n    return (\n      <NavDropdown id={\"authDropdown\"} title={\"Loading...\"} alignRight>\n        <NavDropdown.Header>Loading...</NavDropdown.Header>\n      </NavDropdown>\n    )\n  }\n  if (user) {\n    return (\n      <NavDropdown\n        id={\"authDropdown\"}\n        title={`Hello, ${user.displayName || user.email}`}\n        alignRight\n      >\n        <NavDropdown.Header>\n          You are logged in as <b>{user.displayName || user.email}</b>\n        </NavDropdown.Header>\n        <NavbarLink page=\"/account\" dropdown>\n          Account Settings\n        </NavbarLink>\n        <NavDropdown.Divider />\n        <NavbarLink page=\"/account/logout\" dropdown>\n          Logout\n        </NavbarLink>\n      </NavDropdown>\n    )\n  }\n  if (error) {\n    return (\n      <NavDropdown id={\"authDropdown\"} title={\"Account\"} alignRight>\n        <NavDropdown.Header>\n          There was an error logging you in: error.code\n        </NavDropdown.Header>\n        <NavbarLink page=\"/account\" dropdown>\n          Login Again\n        </NavbarLink>\n      </NavDropdown>\n    )\n  }\n  return (\n    // <NavDropdown id={\"authDropdown\"} title={\"NLI\"} alignRight>\n    //   <NavDropdown.Header>You are not logged in</NavDropdown.Header>\n    <NavbarLink page=\"/account/login\">Login</NavbarLink>\n    // </NavDropdown>\n  )\n}\n\ninterface PropDef {\n  /**\n   * The name of the page that should be active. This should be the path to the page.\n   * For example, on a page /navbarDemo, the value should be `/navbarDemo`. This is used to determine which nav link should be highlighted.\n   */\n  pageName?: string\n  /**\n   * Whether or not the admin variant of the navbar should be rendered instead of the normal component.\n   */\n  admin?: boolean\n  /**\n   * Whether or not the navbar should be transparent\n   */\n  transparent?: boolean\n}\n\nexport const Navbar = ({\n  pageName,\n  admin,\n  transparent,\n}: PropDef): ReactElement => {\n  return (\n    <>\n      <BootstrapNavbar\n        bg=\"dark\"\n        variant=\"dark\"\n        expand=\"lg\"\n        id=\"site-navbar\"\n        className={transparent ? \"transparent-navbar\" : \"\"}\n      >\n        {/* <Container> */}\n        <Link to=\"/\" className=\"link-no-style\">\n          <BootstrapNavbar.Brand as=\"span\">\n            BSA Troop 485{\" \"}\n            {admin ? <span style={{ color: \"#99ccff\" }}>| Admin</span> : <></>}\n          </BootstrapNavbar.Brand>\n        </Link>\n        <BootstrapNavbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <BootstrapNavbar.Collapse\n          id=\"basic-navbar-nav\"\n          className=\"justify-content-end\"\n        >\n          <Nav activeKey={pageName}>\n            <NavbarLink page=\"/page-2\">Page 2</NavbarLink>\n            <NavbarLink page=\"/404\">Link Name 2</NavbarLink>\n            {/*<NavbarLink page=\"/plc/voting/admin\">PLC Admin</NavbarLink>*/}\n            {/*<Link to=\"/plc/voting/vote\" className=\"link-no-style\">*/}\n            {/*  <Button>PLC Voting</Button> /!* TODO: delete *!/*/}\n            {/*</Link>*/}\n            <AuthDropdown />\n          </Nav>\n        </BootstrapNavbar.Collapse>\n        {/* </Container> */}\n      </BootstrapNavbar>\n    </>\n  )\n}\nexport default Navbar\n"},"/Users/jmeng/Documents/code/t485/src/components/layout/seo.tsx":{"language":"typescript","mutants":[{"id":"48","location":{"end":{"column":2,"line":98},"start":{"column":18,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"49","location":{"end":{"column":22,"line":25},"start":{"column":10,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"51","location":{"end":{"column":17,"line":25},"start":{"column":15,"line":25}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"50","location":{"end":{"column":22,"line":25},"start":{"column":10,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"52","location":{"end":{"column":22,"line":25},"start":{"column":18,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"53","location":{"end":{"column":34,"line":26},"start":{"column":17,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"54","location":{"end":{"column":34,"line":26},"start":{"column":17,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"55","location":{"end":{"column":31,"line":26},"start":{"column":29,"line":26}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"57","location":{"end":{"column":20,"line":27},"start":{"column":10,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"56","location":{"end":{"column":34,"line":26},"start":{"column":32,"line":26}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"58","location":{"end":{"column":20,"line":27},"start":{"column":10,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"60","location":{"end":{"column":20,"line":27},"start":{"column":18,"line":27}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"59","location":{"end":{"column":17,"line":27},"start":{"column":15,"line":27}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"61","location":{"end":{"column":28,"line":28},"start":{"column":14,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"62","location":{"end":{"column":28,"line":28},"start":{"column":14,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"64","location":{"end":{"column":28,"line":28},"start":{"column":26,"line":28}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"63","location":{"end":{"column":25,"line":28},"start":{"column":23,"line":28}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"65","location":{"end":{"column":6,"line":41},"start":{"column":12,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"68","location":{"end":{"column":41,"line":44},"start":{"column":39,"line":44}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"66","location":{"end":{"column":71,"line":44},"start":{"column":27,"line":44}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"69","location":{"end":{"column":8,"line":50},"start":{"column":23,"line":48}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"67","location":{"end":{"column":71,"line":44},"start":{"column":27,"line":44}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"70","location":{"end":{"column":55,"line":52},"start":{"column":22,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"72","location":{"end":{"column":10,"line":57},"start":{"column":9,"line":54}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"73","location":{"end":{"column":30,"line":55},"start":{"column":17,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"71","location":{"end":{"column":8,"line":86},"start":{"column":13,"line":53}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"74","location":{"end":{"column":10,"line":61},"start":{"column":9,"line":58}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"75","location":{"end":{"column":31,"line":59},"start":{"column":21,"line":59}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"76","location":{"end":{"column":10,"line":65},"start":{"column":9,"line":62}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"77","location":{"end":{"column":37,"line":63},"start":{"column":21,"line":63}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"78","location":{"end":{"column":10,"line":69},"start":{"column":9,"line":66}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"79","location":{"end":{"column":30,"line":67},"start":{"column":21,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"81","location":{"end":{"column":10,"line":73},"start":{"column":9,"line":70}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"82","location":{"end":{"column":31,"line":71},"start":{"column":17,"line":71}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"80","location":{"end":{"column":29,"line":68},"start":{"column":20,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"85","location":{"end":{"column":34,"line":75},"start":{"column":17,"line":75}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"86","location":{"end":{"column":10,"line":81},"start":{"column":9,"line":78}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"84","location":{"end":{"column":10,"line":77},"start":{"column":9,"line":74}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"83","location":{"end":{"column":29,"line":72},"start":{"column":20,"line":72}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"87","location":{"end":{"column":32,"line":79},"start":{"column":17,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"88","location":{"end":{"column":10,"line":85},"start":{"column":9,"line":82}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"89","location":{"end":{"column":38,"line":83},"start":{"column":17,"line":83}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"90","location":{"end":{"column":30,"line":88},"start":{"column":11,"line":88}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"91","location":{"end":{"column":30,"line":88},"start":{"column":11,"line":88}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"93","location":{"end":{"column":28,"line":88},"start":{"column":27,"line":88}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"92","location":{"end":{"column":28,"line":88},"start":{"column":27,"line":88}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"95","location":{"end":{"column":33,"line":90},"start":{"column":23,"line":90}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"96","location":{"end":{"column":44,"line":91},"start":{"column":40,"line":91}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"94","location":{"end":{"column":16,"line":92},"start":{"column":15,"line":89}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"97","location":{"end":{"column":17,"line":93},"start":{"column":15,"line":93}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"}],"source":"/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React, { ReactElement } from \"react\"\nimport Helmet from \"react-helmet\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nfunction SEO({\n  description,\n  lang,\n  meta,\n  keywords,\n  title,\n}: {\n  description?: string\n  lang?: string\n  meta?: any[] // eslint-disable-line @typescript-eslint/no-explicit-any\n  keywords?: string[]\n  title: string\n}): ReactElement {\n  lang = lang || \"en\"\n  description = description || \"\"\n  meta = meta || []\n  keywords = keywords || []\n\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nexport default SEO\n"},"/Users/jmeng/Documents/code/t485/src/components/voting/VotingGroup.tsx":{"language":"typescript","mutants":[{"id":"98","location":{"end":{"column":2,"line":90},"start":{"column":39,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"100","location":{"end":{"column":67,"line":58},"start":{"column":8,"line":58}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"101","location":{"end":{"column":16,"line":58},"start":{"column":14,"line":58}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"99","location":{"end":{"column":67,"line":58},"start":{"column":8,"line":58}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"102","location":{"end":{"column":8,"line":63},"start":{"column":8,"line":59}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"103","location":{"end":{"column":8,"line":63},"start":{"column":8,"line":59}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"105","location":{"end":{"column":8,"line":74},"start":{"column":8,"line":64}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"104","location":{"end":{"column":22,"line":59},"start":{"column":20,"line":59}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"106","location":{"end":{"column":8,"line":74},"start":{"column":8,"line":64}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"107","location":{"end":{"column":19,"line":64},"start":{"column":17,"line":64}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"108","location":{"end":{"column":44,"line":67},"start":{"column":13,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"109","location":{"end":{"column":44,"line":68},"start":{"column":13,"line":68}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"110","location":{"end":{"column":44,"line":68},"start":{"column":13,"line":68}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"113","location":{"end":{"column":25,"line":68},"start":{"column":14,"line":68}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"112","location":{"end":{"column":35,"line":68},"start":{"column":34,"line":68}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"111","location":{"end":{"column":35,"line":68},"start":{"column":34,"line":68}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"114","location":{"end":{"column":25,"line":68},"start":{"column":14,"line":68}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"117","location":{"end":{"column":60,"line":68},"start":{"column":47,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"116","location":{"end":{"column":25,"line":68},"start":{"column":23,"line":68}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"115","location":{"end":{"column":22,"line":68},"start":{"column":20,"line":68}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"120","location":{"end":{"column":24,"line":71},"start":{"column":13,"line":71}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"119","location":{"end":{"column":24,"line":71},"start":{"column":13,"line":71}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"118","location":{"end":{"column":75,"line":68},"start":{"column":63,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"123","location":{"end":{"column":8,"line":87},"start":{"column":32,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"121","location":{"end":{"column":21,"line":71},"start":{"column":19,"line":71}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"122","location":{"end":{"column":24,"line":71},"start":{"column":22,"line":71}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"124","location":{"end":{"column":55,"line":76},"start":{"column":25,"line":76}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"125","location":{"end":{"column":55,"line":76},"start":{"column":25,"line":76}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"126","location":{"end":{"column":52,"line":76},"start":{"column":51,"line":76}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"127","location":{"end":{"column":52,"line":76},"start":{"column":51,"line":76}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"128","location":{"end":{"column":55,"line":76},"start":{"column":53,"line":76}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed"},{"id":"129","location":{"end":{"column":62,"line":81},"start":{"column":17,"line":81}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"130","location":{"end":{"column":70,"line":84},"start":{"column":23,"line":84}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"131","location":{"end":{"column":69,"line":84},"start":{"column":61,"line":84}},"mutatorName":"BooleanLiteral","replacement":"checked","status":"Killed"}],"source":"import React, { ReactElement } from \"react\"\nimport { Form } from \"react-bootstrap\"\nimport classNames from \"classnames\"\n\ninterface VotingGroupProps {\n  /**\n   * The title of the group.\n   */\n  title?: string\n  /**\n   * The description of the group.\n   */\n  description?: string\n  /**\n   * The options to render. Each option should have a label property dictating what will be\n   * shown to the user, and a value property, which will be referenced in events.\n   */\n  options: {\n    /**\n     * TEST Label\n     * @param label - TEST TEST\n     */\n    label: string\n    value: string | number\n  }[]\n  /**\n   * An array of values that should be selected.\n   */\n  value?: (string | number)[]\n  /**\n   * If provided, the maximum number of votes will be displayed, and visual validation styling will be applied.\n   *\n   */\n  maxVotes?: number\n  /**\n   * A function to be called each time the value of an option changes.\n   * @param value - The `value` of the option that was changed.\n   * @param state - Whether or not the checkbox should now be checked (after the change).\n   */\n  onSelectChange: (value: string | number, state: boolean) => void\n}\n\n/*\n * TODO\n * Add typedoc and see how that works Maybe even write some way to link typedoc with storybook? Probably not that hard.\n * Re setup storybook because we don't use storybook for gatsby pages, only components.\n */\nconst VotingGroup = ({\n  title,\n  description,\n  options,\n  value,\n  onSelectChange,\n  maxVotes,\n}: VotingGroupProps): ReactElement => {\n  return (\n    <div>\n      {title && <h4 className=\"mb-1 votingGroupTitle\">{title}</h4>}\n      {description && (\n        <p className=\"text-muted mb-2 mt-1 votingGroupDescription\">\n          {description}\n        </p>\n      )}\n      {maxVotes && (\n        <p\n          className={classNames(\n            \"mt-2 mb-1 votingGroupMaxVotes\",\n            (value || []).length > maxVotes ? \"text-danger\" : \"text-muted\"\n          )}\n        >\n          {(value || []).length} of {maxVotes} votes used. You are not required\n          to use all your votes.\n        </p>\n      )}\n      {options.map((opt, i) => {\n        const checked = value?.indexOf(opt.value) > -1\n        return (\n          <Form.Check\n            key={i}\n            custom\n            id={`check-${i}-${typeof opt.value}-${opt.value}`} // required for react bootstrap\n            label={opt.label}\n            checked={checked}\n            onChange={(): void => onSelectChange(opt.value, !checked)}\n          />\n        )\n      })}\n    </div>\n  )\n}\n// eslint-disable-next-line no-undef\nexport { VotingGroup, VotingGroupProps }\nexport default VotingGroup\n"},"/Users/jmeng/Documents/code/t485/src/pages/404.tsx":{"language":"typescript","mutants":[{"id":"132","location":{"end":{"column":2,"line":12},"start":{"column":22,"line":6}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import React, { ReactElement } from \"react\"\n\nimport Layout from \"../components/layout/Layout\"\nimport SEO from \"../components/layout/seo\"\n\nconst NotFoundPage = (): ReactElement => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that does not exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n"},"/Users/jmeng/Documents/code/t485/src/pages/account.tsx":{"language":"typescript","mutants":[{"id":"133","location":{"end":{"column":2,"line":27},"start":{"column":51,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"134","location":{"end":{"column":75,"line":11},"start":{"column":42,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"135","location":{"end":{"column":75,"line":11},"start":{"column":42,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"136","location":{"end":{"column":62,"line":11},"start":{"column":60,"line":11}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"137","location":{"end":{"column":75,"line":11},"start":{"column":63,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"138","location":{"end":{"column":12,"line":12},"start":{"column":7,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"139","location":{"end":{"column":12,"line":12},"start":{"column":7,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"140","location":{"end":{"column":12,"line":12},"start":{"column":7,"line":12}},"mutatorName":"BooleanLiteral","replacement":"user","status":"Survived"},{"id":"141","location":{"end":{"column":4,"line":26},"start":{"column":36,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"142","location":{"end":{"column":8,"line":19},"start":{"column":22,"line":16}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"143","location":{"end":{"column":8,"line":22},"start":{"column":24,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"144","location":{"end":{"column":27,"line":21},"start":{"column":21,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"145","location":{"end":{"column":8,"line":25},"start":{"column":30,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"146","location":{"end":{"column":2,"line":192},"start":{"column":42,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"147","location":{"end":{"column":70,"line":53},"start":{"column":50,"line":53}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"148","location":{"end":{"column":70,"line":53},"start":{"column":50,"line":53}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"149","location":{"end":{"column":67,"line":53},"start":{"column":65,"line":53}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"150","location":{"end":{"column":70,"line":53},"start":{"column":68,"line":53}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"151","location":{"end":{"column":58,"line":54},"start":{"column":56,"line":54}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"152","location":{"end":{"column":4,"line":67},"start":{"column":22,"line":63}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"153","location":{"end":{"column":15,"line":64},"start":{"column":10,"line":64}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"154","location":{"end":{"column":17,"line":65},"start":{"column":12,"line":65}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"155","location":{"end":{"column":20,"line":66},"start":{"column":15,"line":66}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"156","location":{"end":{"column":4,"line":78},"start":{"column":25,"line":68}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"158","location":{"end":{"column":51,"line":70},"start":{"column":24,"line":70}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"157","location":{"end":{"column":51,"line":70},"start":{"column":24,"line":70}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"160","location":{"end":{"column":45,"line":71},"start":{"column":27,"line":71}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"159","location":{"end":{"column":36,"line":70},"start":{"column":33,"line":70}},"mutatorName":"EqualityOperator","replacement":"===","status":"Survived"},{"id":"161","location":{"end":{"column":45,"line":71},"start":{"column":27,"line":71}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"162","location":{"end":{"column":42,"line":71},"start":{"column":39,"line":71}},"mutatorName":"EqualityOperator","replacement":"===","status":"Survived"},{"id":"163","location":{"end":{"column":45,"line":71},"start":{"column":43,"line":71}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"164","location":{"end":{"column":27,"line":72},"start":{"column":22,"line":72}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"166","location":{"end":{"column":23,"line":74},"start":{"column":11,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"167","location":{"end":{"column":23,"line":74},"start":{"column":11,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"165","location":{"end":{"column":6,"line":76},"start":{"column":51,"line":73}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"168","location":{"end":{"column":17,"line":74},"start":{"column":15,"line":74}},"mutatorName":"EqualityOperator","replacement":"!=","status":"Survived"},{"id":"169","location":{"end":{"column":23,"line":74},"start":{"column":18,"line":74}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"170","location":{"end":{"column":26,"line":75},"start":{"column":11,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"172","location":{"end":{"column":49,"line":75},"start":{"column":45,"line":75}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"171","location":{"end":{"column":26,"line":75},"start":{"column":11,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"173","location":{"end":{"column":29,"line":78},"start":{"column":6,"line":78}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"174","location":{"end":{"column":52,"line":81},"start":{"column":21,"line":81}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"175","location":{"end":{"column":49,"line":87},"start":{"column":16,"line":87}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"176","location":{"end":{"column":49,"line":87},"start":{"column":16,"line":87}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"177","location":{"end":{"column":39,"line":87},"start":{"column":37,"line":87}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"178","location":{"end":{"column":49,"line":87},"start":{"column":40,"line":87}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"179","location":{"end":{"column":16,"line":93},"start":{"column":16,"line":88}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"180","location":{"end":{"column":16,"line":93},"start":{"column":16,"line":88}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"181","location":{"end":{"column":27,"line":88},"start":{"column":25,"line":88}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"182","location":{"end":{"column":23,"line":90},"start":{"column":20,"line":90}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"183","location":{"end":{"column":69,"line":103},"start":{"column":29,"line":103}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"184","location":{"end":{"column":47,"line":107},"start":{"column":20,"line":107}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"185","location":{"end":{"column":47,"line":107},"start":{"column":20,"line":107}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"187","location":{"end":{"column":47,"line":107},"start":{"column":38,"line":107}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"186","location":{"end":{"column":37,"line":107},"start":{"column":35,"line":107}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"188","location":{"end":{"column":72,"line":119},"start":{"column":29,"line":119}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"190","location":{"end":{"column":64,"line":124},"start":{"column":60,"line":124}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"189","location":{"end":{"column":65,"line":124},"start":{"column":31,"line":124}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"191","location":{"end":{"column":27,"line":126},"start":{"column":24,"line":126}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"192","location":{"end":{"column":12,"line":154},"start":{"column":12,"line":132}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"193","location":{"end":{"column":12,"line":154},"start":{"column":12,"line":132}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"194","location":{"end":{"column":43,"line":132},"start":{"column":41,"line":132}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"195","location":{"end":{"column":40,"line":132},"start":{"column":12,"line":132}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"196","location":{"end":{"column":40,"line":132},"start":{"column":12,"line":132}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"197","location":{"end":{"column":23,"line":132},"start":{"column":21,"line":132}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"198","location":{"end":{"column":74,"line":141},"start":{"column":31,"line":141}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"199","location":{"end":{"column":67,"line":146},"start":{"column":33,"line":146}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"200","location":{"end":{"column":66,"line":146},"start":{"column":62,"line":146}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"201","location":{"end":{"column":29,"line":148},"start":{"column":26,"line":148}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"204","location":{"end":{"column":19,"line":163},"start":{"column":17,"line":163}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"202","location":{"end":{"column":8,"line":189},"start":{"column":8,"line":163}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"203","location":{"end":{"column":8,"line":189},"start":{"column":8,"line":163}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"205","location":{"end":{"column":12,"line":177},"start":{"column":12,"line":165}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"206","location":{"end":{"column":12,"line":177},"start":{"column":12,"line":165}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"207","location":{"end":{"column":26,"line":165},"start":{"column":24,"line":165}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"208","location":{"end":{"column":63,"line":169},"start":{"column":18,"line":169}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"210","location":{"end":{"column":37,"line":169},"start":{"column":35,"line":169}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"209","location":{"end":{"column":63,"line":169},"start":{"column":18,"line":169}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"211","location":{"end":{"column":18,"line":174},"start":{"column":18,"line":170}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"212","location":{"end":{"column":18,"line":174},"start":{"column":18,"line":170}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"213","location":{"end":{"column":34,"line":170},"start":{"column":32,"line":170}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"215","location":{"end":{"column":42,"line":186},"start":{"column":28,"line":186}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"214","location":{"end":{"column":35,"line":184},"start":{"column":23,"line":184}},"mutatorName":"BooleanLiteral","replacement":"changes.any","status":"Survived"},{"id":"216","location":{"end":{"column":65,"line":186},"start":{"column":45,"line":186}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"217","location":{"end":{"column":2,"line":214},"start":{"column":41,"line":193}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"218","location":{"end":{"column":55,"line":195},"start":{"column":50,"line":195}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"219","location":{"end":{"column":50,"line":200},"start":{"column":18,"line":200}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"220","location":{"end":{"column":50,"line":200},"start":{"column":18,"line":200}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"221","location":{"end":{"column":38,"line":200},"start":{"column":36,"line":200}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"222","location":{"end":{"column":55,"line":202},"start":{"column":19,"line":202}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"223","location":{"end":{"column":54,"line":202},"start":{"column":43,"line":202}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"224","location":{"end":{"column":54,"line":202},"start":{"column":50,"line":202}},"mutatorName":"BooleanLiteral","replacement":"old","status":"Survived"},{"id":"225","location":{"end":{"column":58,"line":203},"start":{"column":21,"line":203}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"227","location":{"end":{"column":8,"line":211},"start":{"column":8,"line":205}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"226","location":{"end":{"column":67,"line":203},"start":{"column":61,"line":203}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"228","location":{"end":{"column":8,"line":211},"start":{"column":8,"line":205}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"229","location":{"end":{"column":15,"line":205},"start":{"column":13,"line":205}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"230","location":{"end":{"column":64,"line":208},"start":{"column":29,"line":208}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import React, { Dispatch, ReactElement, SetStateAction } from \"react\"\n\nimport Layout from \"../components/layout/Layout\"\nimport SEO from \"../components/layout/seo\"\nimport { useAuthState } from \"react-firebase-hooks/auth\"\nimport firebase from \"gatsby-plugin-firebase\"\nimport { Button, Form, Table } from \"react-bootstrap\"\n\nconst UpdateDisplayNameForm = (): ReactElement => {\n  const [user, loading, error] = useAuthState(firebase.auth())\n  const [name, setName] = React.useState(user?.displayName || \"Loading...\")\n  if (!user) return <></>\n\n  const handleSubmit = (): void => {\n    user\n      .updateProfile({\n        displayName: name,\n        // photoURL: \"https://example.com/jane-q-user/profile.jpg\"\n      })\n      .then(function() {\n        console.log(\"DONE\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n\ninterface AccountDetailsProps {\n  /**\n   * Whether or not the user can edit the information fields.\n   */\n  editable?: boolean\n  /**\n   * A function to be called each time the editable state changes. This is also called if the user submits, since that is considered a state change as well.\n   * @param newValue\n   */\n  onEditableChange?: (newValue: boolean) => void\n  /**\n   * The user data to display.\n   */\n  userData: {\n    displayName?: string\n    email?: string\n  }\n}\n\nconst AccountDetails = ({\n  editable,\n  onEditableChange,\n  userData,\n}: AccountDetailsProps): ReactElement => {\n  const [newEmail, setNewEmail] = React.useState(userData.email || \"\")\n  const [newPassword, setNewPassword] = React.useState(\"\")\n\n  interface ChangeMap {\n    [key: string]: boolean\n  }\n\n  const [changes, setChanges]: [\n    ChangeMap,\n    Dispatch<SetStateAction<ChangeMap>>\n  ] = React.useState({\n    any: false,\n    email: false,\n    password: false,\n  })\n  React.useEffect(() => {\n    const newChanges: Partial<ChangeMap> = {}\n    newChanges.email = newEmail !== userData.email\n    newChanges.password = newPassword !== \"\"\n    newChanges.any = false\n    Object.keys(newChanges).forEach(function(key) {\n      if (key == \"any\") return\n      if (newChanges[key]) newChanges.any = true\n    })\n    setChanges(newChanges)\n  }, [newEmail, newPassword])\n\n  return (\n    <Form onSubmit={(e): void => e.preventDefault()}>\n      <Table>\n        <tbody>\n          <tr>\n            <th>Full Name</th>\n            <td>\n              {userData.displayName || \"Not Set\"}\n              {editable && (\n                <b>\n                  {\" \"}\n                  (Please contact the webmaster to change your account name)\n                </b>\n              )}\n            </td>\n          </tr>\n          <tr>\n            <th>Email</th>\n            <td>\n              {editable ? (\n                <Form.Control\n                  placeholder=\"Enter a new email\"\n                  value={newEmail}\n                  onChange={(e): void => setNewEmail(e.target.value)}\n                  autoComplete=\"new-email\"\n                />\n              ) : (\n                <>{userData.email || \"Not Set\"}</>\n              )}\n            </td>\n          </tr>\n          <tr>\n            <th>Password</th>\n            <td>\n              {editable ? (\n                <Form.Control\n                  placeholder=\"Enter a new password...\"\n                  type=\"password\"\n                  value={newPassword}\n                  onChange={(e): void => setNewPassword(e.target.value)}\n                  autoComplete=\"new-password\"\n                />\n              ) : (\n                <>\n                  <a onClick={(): void => onEditableChange(true)}>\n                    Enter editing mode\n                  </a>{\" \"}\n                  to change your password\n                </>\n              )}\n            </td>\n          </tr>\n          {editable && changes.password && (\n            <tr>\n              <th>Confirm New Password</th>\n              <td>\n                {editable ? (\n                  <Form.Control\n                    placeholder=\"Confirm Password\"\n                    type=\"password\"\n                    value={newPassword}\n                    onChange={(e): void => setNewPassword(e.target.value)}\n                    autoComplete=\"new-password\"\n                  />\n                ) : (\n                  <>\n                    <a onClick={(): void => onEditableChange(true)}>\n                      Enter editing mode\n                    </a>{\" \"}\n                    to change your password\n                  </>\n                )}\n              </td>\n            </tr>\n          )}\n          <tr>\n            <th>Sign in with google</th>\n            <td>\n              <a>Disable</a>\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n      {editable && (\n        <>\n          {changes.any && (\n            <div>\n              <h3>Summary of your unsaved changes</h3>\n              <ul>\n                {changes.password && <li>Password changed</li>}\n                {changes.email && (\n                  <li>\n                    Email changed from {userData.email} to <b>{newEmail}</b>\n                  </li>\n                )}\n              </ul>\n            </div>\n          )}\n          <Button variant=\"danger\" className=\"\">\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            className=\"float-right\"\n            disabled={!changes.any}\n          >\n            {changes.any ? \"Save Changes\" : \"No changes to save\"}\n          </Button>\n        </>\n      )}\n    </Form>\n  )\n}\nconst AccountPage = (): ReactElement => {\n  const [user, loading, error] = useAuthState(firebase.auth())\n  const [editable, setEditable] = React.useState(false)\n  return (\n    <Layout>\n      <SEO title=\"Your Account\" />\n      <h1>Your Account</h1>\n      <p>Hello, {user?.displayName || user?.email}!</p>\n      <p>Your Name: {user?.displayName}</p>\n      <a onClick={(): void => setEditable(old => !old)}>\n        {editable ? \"Cancel Editing (don't save changes)\" : \"Edit\"}\n      </a>\n      {user && (\n        <AccountDetails\n          editable={editable}\n          onEditableChange={(value): void => setEditable(value)}\n          userData={user}\n        />\n      )}\n    </Layout>\n  )\n}\n\nexport default AccountPage\n"},"/Users/jmeng/Documents/code/t485/src/pages/account/login.tsx":{"language":"typescript","mutants":[{"id":"232","location":{"end":{"column":46,"line":8},"start":{"column":44,"line":8}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"231","location":{"end":{"column":2,"line":52},"start":{"column":39,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"233","location":{"end":{"column":52,"line":9},"start":{"column":50,"line":9}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"234","location":{"end":{"column":4,"line":16},"start":{"column":36,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"237","location":{"end":{"column":33,"line":15},"start":{"column":14,"line":15}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"236","location":{"end":{"column":37,"line":14},"start":{"column":31,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"235","location":{"end":{"column":38,"line":14},"start":{"column":13,"line":14}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"238","location":{"end":{"column":54,"line":21},"start":{"column":23,"line":21}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"239","location":{"end":{"column":60,"line":28},"start":{"column":23,"line":28}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"240","location":{"end":{"column":63,"line":40},"start":{"column":23,"line":40}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import React, { ReactElement } from \"react\"\nimport { Button, Form } from \"react-bootstrap\"\nimport Layout from \"../../components/layout/Layout\"\nimport SEO from \"../../components/layout/seo\"\nimport firebase from \"gatsby-plugin-firebase\"\n\nconst LoginPage = (): ReactElement => {\n  const [email, setEmail] = React.useState(\"\")\n  const [password, setPassword] = React.useState(\"\")\n  const handleSubmit = (): void => {\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(() => console.log(\"done\"))\n      .catch(e => console.log(e))\n  }\n  return (\n    <Layout>\n      <SEO title=\"Login\" />\n      <h1>Login</h1>\n      <Form onSubmit={(e): void => e.preventDefault()}>\n        <Form.Group controlId=\"authEmail\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Enter your email...\"\n            value={email}\n            onChange={(e): void => setEmail(e.target.value)}\n          />\n          <Form.Control.Feedback className=\"text-muted\">\n            Error\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group controlId=\"authPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Enter your password...\"\n            value={password}\n            onChange={(e): void => setPassword(e.target.value)}\n          />\n          <Form.Control.Feedback className=\"text-muted\">\n            Error\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button block variant=\"primary\" type=\"submit\" onClick={handleSubmit}>\n          Login\n        </Button>\n      </Form>\n    </Layout>\n  )\n}\n\nexport default LoginPage\n"},"/Users/jmeng/Documents/code/t485/src/pages/account/logout.tsx":{"language":"typescript","mutants":[{"id":"241","location":{"end":{"column":2,"line":42},"start":{"column":40,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"243","location":{"end":{"column":18,"line":17},"start":{"column":13,"line":17}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"242","location":{"end":{"column":4,"line":18},"start":{"column":22,"line":16}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"244","location":{"end":{"column":52,"line":19},"start":{"column":48,"line":19}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"245","location":{"end":{"column":6,"line":25},"start":{"column":17,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"246","location":{"end":{"column":23,"line":24},"start":{"column":18,"line":24}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"248","location":{"end":{"column":46,"line":35},"start":{"column":13,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"247","location":{"end":{"column":6,"line":28},"start":{"column":26,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"249","location":{"end":{"column":52,"line":38},"start":{"column":13,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import React, { ReactElement } from \"react\"\nimport { Button, Form } from \"react-bootstrap\"\nimport Layout from \"../../components/layout/Layout\"\nimport SEO from \"../../components/layout/seo\"\nimport firebase from \"gatsby-plugin-firebase\"\n\nconst LogoutPage = (): ReactElement => {\n  interface Error {\n    exists: boolean\n    message?: string\n    code?: string\n  }\n  const [error, setError]: [\n    Error,\n    React.Dispatch<React.SetStateAction<Error>>\n  ] = React.useState({\n    exists: false,\n  })\n  const [loading, setLoading] = React.useState(true)\n  firebase\n    .auth()\n    .signOut()\n    .then(() => {\n      setLoading(false)\n    })\n    .catch((e: Error) => {\n      setError(e)\n    })\n  return (\n    <Layout>\n      <SEO title=\"Login\" />\n      <h1>Logout</h1>\n      <p>\n        {loading\n          ? \"Logging you out. Please wait...\"\n          : error.exists\n          ? error.message\n          : \"You have been logged out successfully\"}\n      </p>\n    </Layout>\n  )\n}\n\nexport default LogoutPage\n"},"/Users/jmeng/Documents/code/t485/src/pages/index.tsx":{"language":"typescript","mutants":[{"id":"250","location":{"end":{"column":2,"line":45},"start":{"column":19,"line":17}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"251","location":{"end":{"column":69,"line":21},"start":{"column":17,"line":21}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"252","location":{"end":{"column":29,"line":21},"start":{"column":18,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"254","location":{"end":{"column":55,"line":21},"start":{"column":43,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"253","location":{"end":{"column":41,"line":21},"start":{"column":31,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"255","location":{"end":{"column":68,"line":21},"start":{"column":57,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"256","location":{"end":{"column":40,"line":40},"start":{"column":18,"line":40}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"257","location":{"end":{"column":38,"line":40},"start":{"column":31,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"258","location":{"end":{"column":2,"line":57},"start":{"column":29,"line":47}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import React, { ReactElement } from \"react\"\nimport { Button, Container } from \"react-bootstrap\"\nimport Layout from \"../components/layout/Layout\"\nimport SEO from \"../components/layout/seo\"\nimport \"../styles/index.scss\"\nimport { graphql } from \"gatsby\"\nimport Img, { FluidObject } from \"gatsby-image\"\n\ninterface GraphQLQueryResult {\n  bgImage: {\n    childImageSharp: {\n      fluid: FluidObject\n    }\n  }\n}\n\nconst IndexPage = ({ data }: { data: GraphQLQueryResult }): ReactElement => (\n  <Layout pageName=\"index\" transparentNavFooter>\n    <SEO\n      title=\"Home\"\n      keywords={[`Troop 485`, `Scouting`, `Boy Scouts`, `Cupertino`]}\n    />\n    <Container className=\"text-center container index-page-container\">\n      <div>\n        <h1>Troop 485</h1>\n        <h3>Cupertino, California</h3>\n        <div className=\"text-center cta-block\">\n          <Button variant=\"outline-light\" size=\"lg\" className=\"cta\">\n            About Us\n          </Button>\n          <Button variant=\"primary\" size=\"lg\" className=\"cta\">\n            Join Today\n          </Button>\n        </div>\n      </div>\n      <div className=\"absolute bottom-0 left-0 right-0 top-0 -z-10 overflow-hidden background-image\">\n        <Img\n          fluid={data.bgImage.childImageSharp.fluid}\n          className=\"h-screen\"\n          style={{ minHeight: \"800px\" }}\n        />\n      </div>\n    </Container>\n  </Layout>\n)\n\nexport const query = graphql`\n  query {\n    bgImage: file(relativePath: { eq: \"header.jpg\" }) {\n      childImageSharp {\n        fluid(maxWidth: 1920) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n"},"/Users/jmeng/Documents/code/t485/src/pages/page-2.tsx":{"language":"typescript","mutants":[{"id":"259","location":{"end":{"column":2,"line":12},"start":{"column":22,"line":6}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import React, { ReactElement } from \"react\"\n\nimport Layout from \"../components/layout/Layout\"\nimport SEO from \"../components/layout/seo\"\n\nconst NotFoundPage = (): ReactElement => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that does not exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n"},"/Users/jmeng/Documents/code/t485/src/setupTests.ts":{"language":"typescript","mutants":[{"id":"260","location":{"end":{"column":68,"line":5},"start":{"column":25,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"261","location":{"end":{"column":2,"line":13},"start":{"column":49,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"262","location":{"end":{"column":4,"line":12},"start":{"column":35,"line":9}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"263","location":{"end":{"column":2,"line":19},"start":{"column":30,"line":17}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"264","location":{"end":{"column":23,"line":18},"start":{"column":14,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"266","location":{"end":{"column":2,"line":25},"start":{"column":68,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"265","location":{"end":{"column":2,"line":22},"start":{"column":71,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"267","location":{"end":{"column":44,"line":27},"start":{"column":11,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { configure } from \"enzyme\"\nimport React16Adapter from \"enzyme-adapter-react-16\"\nimport { JSDOM } from \"jsdom\"\n\nconst jsdom = new JSDOM(\"<!doctype html><html><body></body></html>\")\nconst { window } = jsdom\n\nfunction copyProps(src: any, target: any): void {\n  Object.defineProperties(target, {\n    ...Object.getOwnPropertyDescriptors(src),\n    ...Object.getOwnPropertyDescriptors(target),\n  })\n}\n\n;(global as any).window = window\n;(global as any).document = window.document\n;(global as any).navigator = {\n  userAgent: \"node.js\",\n}\n;(global as any).requestAnimationFrame = function(callback: any): any {\n  return setTimeout(callback, 0)\n}\n;(global as any).cancelAnimationFrame = function(id: number): void {\n  clearTimeout(id)\n}\ncopyProps(window, global)\nconfigure({ adapter: new React16Adapter() })\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}};